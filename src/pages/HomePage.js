import { useEffect, useState } from 'react';
import { Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@mui/material';


export default function HomePage(){

    const [dogData, setDogData] = useState([]);
    const [dogIds, setDogIds] = useState([]);
    const [orderByAsc, setOrderByAsc] = useState(true);

    const [page, setPage] = useState(1);
    const [pageSize, setPageSize] = useState(50);

    // use a table with a bunch of filtering abilities on top

//     interface Coordinates {
//     lat: number;
//     lon: number;
// }

//     interface Location {
//     zip_code: string
//     latitude: number
//     longitude: number
//     city: string
//     state: string
//     county: string


//     interface Dog {
//     id: string
//     img: string
//     name: string
//     age: number
//     zip_code: string
//     breed: string


    // make sure to add a favorite field
    // field = key within json
    // headerName = how it's displayed
    const dogColumns = [
        // {
        //     field: favorite,
        //     headerName: 'Favrorite'
        // },
        {
            field: 'img',
            headerName: 'image',
        },
         {
            field: 'breed',
            headerName: 'Breed',
        },
        {
            field: 'name',
            headerName: 'Name',
        },
        {
            field: 'age',
            headerName: 'Age',
        },
        {
            field: 'zip_code',
            headerName: 'Zip Code',
        },
       
        

    ];

    async function test(){
        console.log('fetching test');
        const val = await fetch(`https://frontend-take-home-service.fetch.com/dogs/search`,{
            method: 'GET',
            credentials: 'include'
        });
        console.log(val, 'returned val');
            
    }

    test();

    useEffect(
        ()=> {
            // make sure when you get results you add a favorite field

            // dogs/search gets you dog ids
            // dogs/breeds gets you breed names


            fetch(`https://frontend-take-home-service.fetch.com/dogs/search`,
                {method: 'GET',
                credentials: 'include',})
            .then(res => res.json())
            .then(resJson => {
                
                setDogIds(resJson.resultIds);
                // fetch the dog information for each dog id 
                fetch(`https://frontend-take-home-service.fetch.com/dogs`,
                    {
                        method: 'POST',
                        headers: {
                            'Content-type': 'application/JSON'
                        },
                        body:JSON.stringify(resJson),
                        credentials: 'include'

                    }
                )
                .then(res2 => res2.json())
                .then(resJson2 => {
                    setDogData(resJson2);
                console.log(dogData, ' dog dataa');
                console.log(resJson2, 'resJson2')
            });
            });
            // once you get dog ids with number you want then you post those ids and get the results

        }, []
    );


    // user must be able to filter by breed
    // results should be paginated
    // results should be sorted asc, should be able to switch to desc
    // all fields present except id

    // Users should be able to select their favorite dogs from the search results. 
    // When finished searching, they should be able to generate a match based on dogs 
    // added to the favorites list. A single match will be generated by sending all 
    // favorited dog IDs to the `/dogs/match` endpoint. You should display this match however you see fit.





    // endpoints: 
    //      dogs/breeds: Returns an array of all possible breed names.
    //      dogs/search? query parameters: 
    //          `breeds` - an array of breeds
    //          `zipCodes` - an array of zip codes
    //          `ageMin` - a minimum age
    //          `ageMax` - a maximum age


// ### <u>**`GET /dogs/search`**</u>

// #### Query Parameters

// The following query parameters can be supplied to filter the search results. All are optional; if none are provided, the search will match all dogs.

// -   `breeds` - an array of breeds
// -   `zipCodes` - an array of zip codes
// -   `ageMin` - a minimum age
// -   `ageMax` - a maximum age

// Additionally, the following query parameters can be used to configure the search:

// -   `size` - the number of results to return; defaults to 25 if omitted
// -   `from` - a cursor to be used when paginating results (optional)
// -   `sort` - the field by which to sort results, and the direction of the sort; in the format `sort=field:[asc|desc]`.
//     -   results can be sorted by the following fields:
//         -   `breed`
//         -   `name`
//         -   `age`
//     -   Ex: `sort=breed:asc`

// #### Return Value

// Returns an object with the following properties:

// -   `resultIds` - an array of dog IDs matching your query
// -   `total` - the total number of results for the query (not just the current page)
// -   `next` - a query to request the next page of results (if one exists)
// -   `prev` - a query to request the previous page of results (if one exists)

// The maximum total number of dogs that will be matched by a single query is 10,000.

// ### <u>**`POST /dogs`**</u>

// #### Body Parameters

// The body should be an array of no more than 100 dog IDs to fetch (no pun intended).

// // API Request Function
// body: string[]

// #### Return Value

// Returns an array of dog objects

// ### <u>**`POST /dogs/match`**</u>

// #### Body Parameters

// The body of this request should be an array of dog IDs.


// **Example**
// ```ts
// // API Request Function
// ...
// body: string[]
// ...
// ```

// #### Return Value

// This endpoint will select a single ID from the provided list of dog IDs. This ID represents the dog the user has been matched with for adoption.

// ```ts
// interface Match {
//     match: string
// }
// ```

// ### <u>**`POST /locations`**</u>

// #### Body Parameters

// The body of this request should be an array of no more than 100 ZIP codes.

// **Example**
// ```ts
// // API Request Function
// ...
// body: string[]
// ...
// ```


// #### Return Value

// Returns an array of Location objects.

// ### <u>**`POST /locations/search`**</u>


// #### Body Parameters

// The following body parameters can be supplied to filter the search results. All are optional; if none are provided, the search will match all locations.

// -   `city` - the full or partial name of a city
// -   `states` - an array of [two-letter state/territory abbreviations](https://www.faa.gov/air_traffic/publications/atpubs/cnt_html/appendix_a.html)
// -   `geoBoundingBox` - an object defining a geographic bounding box:
//     -   This object must contain one of the following combinations of properties:
//         -   `top`, `left`, `bottom`, `right`
//         -   `bottom_left`, `top_right`
//         -   `bottom_right`, `top_left`
//     -   Each property should have the following data:
//         -   `lat` - latitude
//         -   `lon` - longitude

// Additionally, the following body parameters can be used to configure the search:

// -   `size` - the number of results to return; defaults to 25 if omitted
// -   `from` - a cursor to be used when paginating results (optional)

// The maximum total number of ZIP codes that will be matched by a single query is 10,000.

// **Example**
// ```ts
// // API Request Function
// ...
// body: {
//     city?: string,
//     states?: string[],
//     geoBoundingBox?: {
//         top?: Coordinates,
//         left?: Coordinates,
//         bottom?: Coordinates,
//         right?: Coordinates,
//         bottom_left?: Coordinates,
//         top_left?: Coordinates
//     },
//     size?: number,
//     from?: number
// }
// ...
// ```
// #### Return Value

// Returns an object with the following properties:

// -   `results` - an array of Location objects
// -   `total` - the total number of results for the query (not just the current page)

// ```ts
// {
//     results: Location[],
//     total: number
// }
// ```

// default way to render cell
 const defaultRenderCell = (col, row) => {
    return <div>{row[col.field]}</div>;
  }

    return(
        <TableContainer>
            <Table>
                <TableHead>
                    <TableRow>
                        {dogColumns.map(col => <TableCell key={col.headerName}>{col.headerName}</TableCell>)}
                    </TableRow>
                </TableHead>
                <TableBody>
                    {dogData.map((row, idx) => 
                    <TableRow key={idx}>
                        {
                            dogColumns.map(col=> 
                                <TableCell key={col.headerName}>
                                    {col.renderCell ? col.renderCell(row) : defaultRenderCell(col, row)}
                                </TableCell>
                            )
                        }
                    </TableRow>
                    )
                    }
                </TableBody>
            </Table>
        </TableContainer>
    );
}